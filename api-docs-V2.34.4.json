{
    "swagger": "2.0",
    "info": {
        "title": "Hudu API Documentation",
        "description": "<p>Welcome to the Hudu REST API documentation. The Hudu REST API enables seamless automation of your IT documentation. The API is organized into various resources, each with its own specific endpoint.</p> \n<p>All API requests require authentication using an API key. To obtain an API key, navigate to <b>Hudu Admin</b> → <b>Basic Information</b> → <b>API Keys</b>. Include the API key in your request headers as shown below:</p>\n<pre>curl https://[YOUR_DOMAIN]/api/v1/companies?page=1 -H \"x-api-key: YOUR_API_KEY_HERE\"</pre>\n<p>You can create and delete API keys at any time.</p>\n<h2>Scoping API Keys</h2>\n<p>API keys can be configured with the following options:</p>\n<p>1. Access to passwords (all REST actions)<br /> 2. Ability to perform destructive actions (DELETE actions)<br /> 3. Ability to perform exports<br /> 4. Specify whitelisted IPs<br /> 5. Specify company scopes</p>\n<p>These options can only be configured during the creation of the key.</p>\n<p>We recommend limiting access and providing only the required permissions for each application.</p>\n<h2>Format</h2>\n<p>All API requests must use JSON format, unless otherwise specified.</p>\n<h2>Names in the API</h2>\n<p>Note that some names in the API may differ from those in your Hudu application:</p>\n<table> <tr>\n    <td>Name in Hudu</td>\n    <td>Name in API</td>\n</tr> <tr>\n    <td>Company (customizable)</td>\n    <td>Company</td>\n</tr> <tr>\n    <td>Password</td>\n    <td>AssetPassword</td>\n</tr> <tr>\n    <td>Knowledge Base Article</td>\n    <td>Article</td>\n</tr> <tr>\n    <td>Process</td>\n    <td>Procedure</td>\n</tr> </table>\n<h2>Pagination</h2>\n<p>API requests are paginated by default. To navigate between pages, simply add ?page=X to your request. Pagination is in sets of 25 results.</p>\n<h2>Rate Limiting</h2>\n<p>The rate limit is set at 300 requests per minute.</p> &copy; 2023 Hudu Technologies, Inc. All rights reserved.",
        "version": "1.0",
        "x-copyright": "&copy; 2023 Hudu Technologies, Inc. All rights reserved."
    },
    "basePath": "/api/v1",
    "consumes": [
        "application/x-www-form-urlencoded",
        "multipart/form-data"
    ],
    "paths": {
        "/activity_logs": {
            "get": {
                "tags": [
                    "Activity Logs"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_activity_logs",
                "summary": "Retrieve a list of activity logs",
                "description": "This endpoint allows you to fetch activity logs of users with various filtering options.",
                "parameters": [
                    {
                        "name": "page",
                        "type": "number",
                        "in": "query",
                        "description": "Specify the current page of results to retrieve"
                    },
                    {
                        "name": "user_id",
                        "type": "number",
                        "in": "query",
                        "description": "Filter logs by a specific user ID"
                    },
                    {
                        "name": "user_email",
                        "type": "string",
                        "in": "query",
                        "description": "Filter logs by a user's email address"
                    },
                    {
                        "name": "resource_id",
                        "type": "number",
                        "in": "query",
                        "description": "Filter logs by resource ID; must be used in conjunction with resource_type"
                    },
                    {
                        "name": "resource_type",
                        "type": "string",
                        "in": "query",
                        "description": "Filter logs by resource type (Asset, AssetPassword, Company, Article, etc.); must be used in conjunction with resource_id"
                    },
                    {
                        "name": "action_message",
                        "type": "string",
                        "in": "query",
                        "description": "Filter logs by the action performed"
                    },
                    {
                        "name": "start_date",
                        "type": "string",
                        "in": "query",
                        "description": "Filter logs starting from a specific date; must be in ISO 8601 format"
                    },
                    {
                        "name": "page_size",
                        "type": "number",
                        "in": "query",
                        "description": "Specify the number of results to return per page"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Activity Logs"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "delete_activity_logs",
                "summary": "Delete activity logs",
                "description": "This endpoint allows you to delete activity logs from a specific datetime. If the 'delete_unassigned_logs' parameter is set to true, only logs where user_id is nil will be deleted.",
                "parameters": [
                    {
                        "name": "datetime",
                        "type": "string",
                        "in": "query",
                        "required": true,
                        "description": "Specify the starting datetime from which logs will be deleted; must be in ISO 8601 format"
                    },
                    {
                        "name": "delete_unassigned_logs",
                        "type": "boolean",
                        "in": "query",
                        "required": false,
                        "description": "If true, only deletes logs where user_id is nil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad Request - Invalid datetime format or missing datetime parameter"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api_info": {
            "get": {
                "tags": [
                    "API Info"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "get_api_info",
                "summary": "Retrieve API information",
                "description": "This endpoint returns the version and date of your Hudu instance in JSON format:\n  \n{\n  \"version\": \"x.x\",\n  \"date\": \"2021-11-03\"\n}",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "version": {
                                    "type": "string",
                                    "description": "The version of the Hudu instance"
                                },
                                "date": {
                                    "type": "string",
                                    "description": "The date of the Hudu instance"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/articles": {
            "get": {
                "tags": [
                    "Articles"
                ],
                "operationId": "get_articles",
                "summary": "Get a list of Knowledge Base Articles",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by article name"
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by company_id"
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "in": "query",
                        "description": "Get current page of results"
                    },
                    {
                        "name": "draft",
                        "type": "boolean",
                        "in": "query",
                        "description": "Filter by draft status"
                    },
                    {
                        "name": "enable_sharing",
                        "type": "boolean",
                        "in": "query",
                        "description": "If true, filter by public articles"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "in": "query",
                        "description": "Number of results to return"
                    },
                    {
                        "name": "slug",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by URL slug"
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by search query"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter articles updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters articles updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters articles updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters articles updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Article"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Articles"
                ],
                "operationId": "post_articles",
                "summary": "Create a Knowledge Base Article",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "article",
                        "description": "Article object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "content": {
                                    "type": "string",
                                    "description": "Article content"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Article name"
                                },
                                "enable_sharing": {
                                    "type": "boolean",
                                    "description": "When true, the article has a public URL for non-authenticated users to view"
                                },
                                "folder_id": {
                                    "type": "integer",
                                    "description": "Used to associate article with a folder"
                                },
                                "company_id": {
                                    "type": "integer",
                                    "description": "Used to associate article with a company"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Article created successfully",
                        "schema": {
                            "$ref": "#/definitions/Article"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/articles/{id}": {
            "get": {
                "tags": [
                    "Articles"
                ],
                "operationId": "get_articles_id",
                "summary": "Get a Knowledge Base Article",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested article"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Article"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Articles"
                ],
                "operationId": "put_articles_id",
                "summary": "Update a Knowledge Base Article",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "article",
                        "description": "Article object that needs to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "content": {
                                    "type": "string",
                                    "description": "Article content"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Article name"
                                },
                                "enable_sharing": {
                                    "type": "boolean",
                                    "description": "When true, the article has a public URL for non-authenticated users to view"
                                },
                                "folder_id": {
                                    "type": "integer",
                                    "description": "Used to associate article with a folder"
                                },
                                "company_id": {
                                    "type": "integer",
                                    "description": "Used to associate article with a company"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Article"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Articles"
                ],
                "operationId": "delete_articles_id",
                "summary": "Delete a Knowledge Base Article",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested article"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Article deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/articles/{id}/archive": {
            "put": {
                "tags": [
                    "Articles"
                ],
                "operationId": "put_articles_id_archive",
                "summary": "Archive a Knowledge Base Article",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested article"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article archived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                }
            }
        },
        "/articles/{id}/unarchive": {
            "put": {
                "tags": [
                    "Articles"
                ],
                "operationId": "put_articles_id_unarchive",
                "summary": "Unarchive a Knowledge Base Article",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested article"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article unarchived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                }
            }
        },
        "/asset_layouts": {
            "get": {
                "tags": [
                    "Asset Layouts"
                ],
                "consumes": [
                    "application/json",
                    "multipart/form-data"
                ],
                "operationId": "get_asset_layouts",
                "summary": "Get a list of Asset Layouts",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by the name of the Asset Layout"
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "in": "query",
                        "description": "Get the current page of results"
                    },
                    {
                        "name": "slug",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by URL slug"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter asset layouts updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters asset layouts updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters asset layouts updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters asset layouts updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Asset Layouts",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "Retrieve a list of available Asset Layouts."
            },
            "post": {
                "tags": [
                    "Asset Layouts"
                ],
                "operationId": "post_asset_layouts",
                "summary": "Create an Asset Layout",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "asset_layout",
                        "description": "Asset layout object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the Asset Layout"
                                },
                                "icon": {
                                    "type": "string",
                                    "description": "Icon class name"
                                },
                                "color": {
                                    "type": "string",
                                    "description": "Hex code for the background color"
                                },
                                "icon_color": {
                                    "type": "string",
                                    "description": "Hex code for the icon color"
                                },
                                "include_passwords": {
                                    "type": "boolean",
                                    "description": "If true, include passwords in the Asset Layout"
                                },
                                "include_photos": {
                                    "type": "boolean",
                                    "description": "If true, include photos in the Asset Layout"
                                },
                                "include_comments": {
                                    "type": "boolean",
                                    "description": "If true, include comments in the Asset Layout"
                                },
                                "include_files": {
                                    "type": "boolean",
                                    "description": "If true, include files in the Asset Layout"
                                },
                                "password_types": {
                                    "type": "string",
                                    "description": "List of password types, separated with new line characters"
                                },
                                "fields": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "label": {
                                                "type": "string"
                                            },
                                            "field_type": {
                                                "type": "string"
                                            },
                                            "required": {
                                                "type": "boolean"
                                            },
                                            "show_in_list": {
                                                "type": "boolean"
                                            },
                                            "position": {
                                                "type": "integer"
                                            }
                                        }
                                    },
                                    "description": "An array of fields for the Asset Layout"
                                }
                            },
                            "example": {
                                "asset_layout": {
                                    "name": "Asset-Layout-Name-Here",
                                    "icon": "icon-emblem-here E.g. --> fas fa-home",
                                    "color": "icon-color-here E.g. --> #FFFFF",
                                    "icon_color": "icon-background-color-here E.g. --> #FFFFF",
                                    "include_passwords": true,
                                    "include_photos": true,
                                    "include_comments": true,
                                    "include_files": true,
                                    "fields": [
                                        {
                                            "label": "Name-of-the-field-here",
                                            "field_type": "type-of-field-here E.g. Text, RichText, Number",
                                            "required": true,
                                            "show_in_list": true,
                                            "position": 1
                                        },
                                        {
                                            "label": "Another-field-name-here",
                                            "field_type": "Another-type-of-field E.g. Text, RichText, Number",
                                            "required": false,
                                            "show_in_list": false,
                                            "position": 2
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created an Asset Layout",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "description": "Create a new Asset Layout with the specified properties."
            }
        },
        "/asset_layouts/{id}": {
            "get": {
                "tags": [
                    "Asset Layouts"
                ],
                "operationId": "get_asset_layouts_id",
                "summary": "Get an Asset Layout",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested Asset Layout"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Asset Layouts"
                ],
                "operationId": "put_asset_layouts_id",
                "summary": "Update an Asset Layout",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the Asset Layout to be updated"
                    },
                    {
                        "in": "body",
                        "name": "asset_layout",
                        "description": "Asset layout object that needs to be updated in the store",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "fields": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "An array of field names for the Asset Layout"
                                },
                                "active": {
                                    "type": "boolean",
                                    "description": "If true, the Asset Layout is active"
                                },
                                "icon_color": {
                                    "type": "string",
                                    "description": "Hex code for the icon color"
                                },
                                "color": {
                                    "type": "string",
                                    "description": "Hex code for the background color"
                                },
                                "icon": {
                                    "type": "string",
                                    "description": "Icon class name"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of the Asset Layout"
                                },
                                "include_passwords": {
                                    "type": "boolean",
                                    "description": "If true, include passwords in the Asset Layout"
                                },
                                "include_photos": {
                                    "type": "boolean",
                                    "description": "If true, include photos in the Asset Layout"
                                },
                                "include_comments": {
                                    "type": "boolean",
                                    "description": "If true, include comments in the Asset Layout"
                                },
                                "include_files": {
                                    "type": "boolean",
                                    "description": "If true, include files in the Asset Layout"
                                },
                                "password_types": {
                                    "type": "string",
                                    "description": "List of password types, separated with new line characters"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Layout"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/asset_passwords": {
            "get": {
                "tags": [
                    "Asset Passwords"
                ],
                "operationId": "get_asset_passwords",
                "summary": "Get a list of Passwords",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by name of password"
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "format": "int64",
                        "in": "query",
                        "description": "Filter by company_id"
                    },
                    {
                        "name": "archived",
                        "type": "boolean",
                        "in": "query",
                        "description": "Set to true to display only archived assets"
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "Get current page of results"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "Number of results to return"
                    },
                    {
                        "name": "slug",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by url slug"
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by search query"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter asset passwords updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters asset passwords updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters asset passwords updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters asset passwords updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Asset_Password"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Asset Passwords"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_asset_passwords",
                "summary": "Create a Password",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Asset Password data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "asset_password": {
                                    "type": "object",
                                    "properties": {
                                        "password": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "company_id": {
                                            "type": "integer",
                                            "format": "int64"
                                        },
                                        "passwordable_type": {
                                            "type": "string"
                                        },
                                        "passwordable_id": {
                                            "type": "integer",
                                            "format": "int64"
                                        },
                                        "in_portal": {
                                            "type": "boolean"
                                        },
                                        "otp_secret": {
                                            "type": "string"
                                        },
                                        "url": {
                                            "type": "string"
                                        },
                                        "username": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "password_type": {
                                            "type": "string"
                                        },
                                        "password_folder_id": {
                                            "type": "integer",
                                            "format": "int64"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/asset_passwords/{id}": {
            "get": {
                "tags": [
                    "Asset Passwords"
                ],
                "operationId": "get_asset_passwords_id",
                "summary": "Get a Password",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested Password"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Asset Passwords"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_asset_passwords_id",
                "summary": "Update a Password",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested Password"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Asset Password data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "asset_password": {
                                    "type": "object",
                                    "properties": {
                                        "password": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "company_id": {
                                            "type": "integer",
                                            "format": "int64"
                                        },
                                        "passwordable_type": {
                                            "type": "string"
                                        },
                                        "passwordable_id": {
                                            "type": "integer",
                                            "format": "int64"
                                        },
                                        "in_portal": {
                                            "type": "boolean"
                                        },
                                        "otp_secret": {
                                            "type": "string"
                                        },
                                        "url": {
                                            "type": "string"
                                        },
                                        "username": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "password_type": {
                                            "type": "string"
                                        },
                                        "password_folder_id": {
                                            "type": "integer",
                                            "format": "int64"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Asset Passwords"
                ],
                "operationId": "delete_asset_passwords_id",
                "summary": "Delete a Password",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested Password"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/asset_passwords/{id}/archive": {
            "put": {
                "tags": [
                    "Asset Passwords"
                ],
                "operationId": "put_asset_passwords_id_archive",
                "summary": "Archive a Password",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested Password"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Asset_Password"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                }
            }
        },
        "/asset_passwords/{id}/unarchive": {
            "put": {
                "tags": [
                    "Asset Passwords"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "put_asset_passwords_id_unarchive",
                "summary": "Unarchive a Password",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "id of the requested Password"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                },
                "description": ""
            }
        },
        "/assets": {
            "get": {
                "tags": [
                    "Assets"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "get_assets",
                "summary": "Retrieve a list of assets",
                "parameters": [
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "query",
                        "description": "Filter assets by the parent company's ID"
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "in": "query",
                        "description": "Filter assets by their ID"
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter assets by their name"
                    },
                    {
                        "name": "primary_serial",
                        "type": "string",
                        "in": "query",
                        "description": "Filter assets by their primary serial number"
                    },
                    {
                        "name": "asset_layout_id",
                        "type": "number",
                        "in": "query",
                        "description": "Filter assets by their associated asset layout's ID"
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "in": "query",
                        "description": "Specify the page number of results to return"
                    },
                    {
                        "name": "archived",
                        "type": "boolean",
                        "in": "query",
                        "description": "Set to true to display only archived assets"
                    },
                    {
                        "name": "page_size",
                        "type": "number",
                        "in": "query",
                        "description": "Limit the number of assets returned per page"
                    },
                    {
                        "name": "slug",
                        "type": "string",
                        "in": "query",
                        "description": "Filter assets by their URL slug"
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "in": "query",
                        "description": "Filter assets using a search query"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter assets updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters assets updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters assets updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters assets updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of assets successfully retrieved",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "assets": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Asset"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, authentication required"
                    },
                    "404": {
                        "description": "The specified resource(s) could not be found"
                    }
                },
                "description": "Retrieve a list of assets based on the provided filters and pagination settings"
            }
        },
        "/companies/{company_id}/assets": {
            "get": {
                "tags": [
                    "Assets"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "get_companies_company_id_assets",
                "summary": "Get a list of Assets specific to a Company",
                "parameters": [
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested parent Company"
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "in": "query",
                        "description": "The current page of results to retrieve"
                    },
                    {
                        "name": "archived",
                        "type": "boolean",
                        "in": "query",
                        "description": "Set to true to only show archived results"
                    },
                    {
                        "name": "page_size",
                        "type": "number",
                        "in": "query",
                        "description": "The number of results to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of assets for the specified company",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "assets": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Asset"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "Retrieve a list of assets specific to a particular company."
            },
            "post": {
                "tags": [
                    "Assets"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_companies_company_id_assets",
                "summary": "Create an Asset",
                "parameters": [
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the parent company for the new asset"
                    },
                    {
                        "name": "asset",
                        "in": "body",
                        "required": true,
                        "description": "The asset to create",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the new asset"
                                },
                                "asset_layout_id": {
                                    "type": "number",
                                    "description": "The identifier of the asset layout associated with the new asset"
                                },
                                "primary_serial": {
                                    "type": "string",
                                    "description": "The primary serial number of the new asset"
                                },
                                "primary_mail": {
                                    "type": "string",
                                    "description": "The primary email associated with the new asset"
                                },
                                "primary_model": {
                                    "type": "string",
                                    "description": "The primary model of the new asset"
                                },
                                "primary_manufacturer": {
                                    "type": "string",
                                    "description": "The primary manufacturer of the new asset"
                                },
                                "custom_fields": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "description": "An array of JSON objects with the label underscored and downcased. The label must correspond with an existing asset layout field's label."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    }
                }
            }
        },
        "/companies/{company_id}/assets/{id}": {
            "get": {
                "tags": [
                    "Assets"
                ],
                "operationId": "get_companies_company_id_assets_id",
                "summary": "Get an Asset",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested Asset"
                    },
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested parent Company"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "Retrieve a specific asset by its identifier."
            },
            "put": {
                "tags": [
                    "Assets"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_companies_company_id_assets_id",
                "summary": "Update an Asset",
                "parameters": [
                    {
                        "name": "asset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        },
                        "description": "The updated asset data in JSON format"
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested Asset"
                    },
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested parent Company"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "description": "Update the specified asset with new information. Asset data should be sent in the body of the request in JSON format. NOTE: to update fields you must use the 'custom_fields' key. Then specify the label and value as a key pair. The label must in snake case (lowercase with underscores instead of spaces) For example: <pre>{\"asset\":{\"name\": \"new name\", \"asset_layout_id\": 3, \"primary_serial\": \"new serial\", \"custom_fields\": [{\"brand\": \"Apple\", \"model\": \"MacBook Pro\"}]}}</pre>"
            },
            "delete": {
                "tags": [
                    "Assets"
                ],
                "operationId": "delete_companies_company_id_assets_id",
                "summary": "Delete an Asset",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested Asset"
                    },
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested parent Company"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Asset deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "Deletes the specified Asset. Returns a 204 status code if successful."
            }
        },
        "/companies/{company_id}/assets/{id}/archive": {
            "put": {
                "tags": [
                    "Assets"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "put_companies_company_id_assets_id_archive",
                "summary": "Archive an Asset",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested Asset"
                    },
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested parent Company"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Asset archived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Archival Failure"
                    }
                },
                "description": "Archives the specified Asset. Returns a 200 status code if successful."
            }
        },
        "/companies/{company_id}/assets/{id}/unarchive": {
            "put": {
                "tags": [
                    "Assets"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "put_companies_company_id_assets_id_unarchive",
                "summary": "Unarchive an Asset",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested Asset"
                    },
                    {
                        "name": "company_id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "The identifier of the requested parent Company"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Asset unarchived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unarchival Failure"
                    }
                },
                "description": "Unarchives the specified Asset. Returns a 200 status code if successful."
            }
        },
        "/companies": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "operationId": "get_companies",
                "summary": "Retrieve a list of companies",
                "parameters": [
                    {
                        "name": "page",
                        "type": "number",
                        "in": "query",
                        "description": "Retrieve the specified page of results"
                    },
                    {
                        "name": "page_size",
                        "type": "number",
                        "in": "query",
                        "description": "Specify the number of results to return per page"
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by name"
                    },
                    {
                        "name": "phone_number",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by phone number"
                    },
                    {
                        "name": "website",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by website"
                    },
                    {
                        "name": "city",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by city"
                    },
                    {
                        "name": "id_number",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by id_number"
                    },
                    {
                        "name": "state",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by state"
                    },
                    {
                        "name": "slug",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by URL slug"
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by a search query"
                    },
                    {
                        "name": "id_in_integration",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies by id/identifier in PSA/RMM/outside integration"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter companies updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of companies",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "assets": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Company"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "Retrieve a list of companies with optional filtering and pagination parameters."
            },
            "post": {
                "tags": [
                    "Companies"
                ],
                "operationId": "post_companies",
                "summary": "Create a new company",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the company"
                                },
                                "nickname": {
                                    "type": "string",
                                    "description": "The nickname of the company"
                                },
                                "company_type": {
                                    "type": "string",
                                    "description": "The type of the company"
                                },
                                "address_line_1": {
                                    "type": "string",
                                    "description": "The first line of the company's address"
                                },
                                "address_line_2": {
                                    "type": "string",
                                    "description": "The second line of the company's address"
                                },
                                "city": {
                                    "type": "string",
                                    "description": "The city where the company is located"
                                },
                                "state": {
                                    "type": "string",
                                    "description": "The state where the company is located"
                                },
                                "zip": {
                                    "type": "string",
                                    "description": "The zip code of the company's location"
                                },
                                "country_name": {
                                    "type": "string",
                                    "description": "The country where the company is located"
                                },
                                "phone_number": {
                                    "type": "string",
                                    "description": "The company's phone number"
                                },
                                "fax_number": {
                                    "type": "string",
                                    "description": "The company's fax number"
                                },
                                "website": {
                                    "type": "string",
                                    "description": "The company's website"
                                },
                                "id_number": {
                                    "type": "string",
                                    "description": "The company's ID number"
                                },
                                "parent_company_id": {
                                    "type": "number",
                                    "description": "The parent company's ID, if applicable"
                                },
                                "notes": {
                                    "type": "string",
                                    "description": "Additional notes about the company"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Company created successfully",
                        "schema": {
                            "$ref": "#/definitions/Company"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "description": "Create a new company with the provided information."
            }
        },
        "/companies/{id}": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "operationId": "get_companies_id",
                "summary": "Retrieve a specific company",
                "description": "Fetch the details of a company by its ID.",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested company"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company found",
                        "schema": {
                            "$ref": "#/definitions/Company"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Companies"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_companies_id",
                "summary": "Update a specific company",
                "description": "Update the details of a company by its ID.",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "ID of the company to update"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the company"
                                },
                                "nickname": {
                                    "type": "string",
                                    "description": "The nickname of the company"
                                },
                                "company_type": {
                                    "type": "string",
                                    "description": "The type of the company"
                                },
                                "address_line_1": {
                                    "type": "string",
                                    "description": "The first line of the company's address"
                                },
                                "address_line_2": {
                                    "type": "string",
                                    "description": "The second line of the company's address"
                                },
                                "city": {
                                    "type": "string",
                                    "description": "The city where the company is located"
                                },
                                "state": {
                                    "type": "string",
                                    "description": "The state where the company is located"
                                },
                                "zip": {
                                    "type": "string",
                                    "description": "The zip code of the company's location"
                                },
                                "country_name": {
                                    "type": "string",
                                    "description": "The country where the company is located"
                                },
                                "phone_number": {
                                    "type": "string",
                                    "description": "The company's phone number"
                                },
                                "fax_number": {
                                    "type": "string",
                                    "description": "The company's fax number"
                                },
                                "website": {
                                    "type": "string",
                                    "description": "The company's website"
                                },
                                "id_number": {
                                    "type": "string",
                                    "description": "The company's ID number"
                                },
                                "parent_company_id": {
                                    "type": "number",
                                    "description": "The parent company's ID, if applicable"
                                },
                                "notes": {
                                    "type": "string",
                                    "description": "Additional notes about the company"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Company"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Companies"
                ],
                "operationId": "delete_companies_id",
                "summary": "Delete a specific company",
                "description": "Delete a company by its ID. Returns a 204 if successful.",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "ID of the company to delete"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Company deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    }
                }
            }
        },
        "/companies/{id}/archive": {
            "put": {
                "tags": [
                    "Companies"
                ],
                "operationId": "put_companies_id_archive",
                "summary": "Archive a specific company",
                "description": "Mark a company as archived by its ID. Archived companies are hidden from the regular list of companies but can be retrieved if necessary.",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "ID of the company to archive"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company archived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    },
                    "422": {
                        "description": "Archival failure"
                    }
                }
            }
        },
        "/companies/{id}/unarchive": {
            "put": {
                "tags": [
                    "Companies"
                ],
                "operationId": "put_companies_id_unarchive",
                "summary": "Unarchive a specific company",
                "description": "Mark a previously archived company as unarchived by its ID. Unarchived companies are visible in the regular list of companies.",
                "parameters": [
                    {
                        "name": "id",
                        "type": "number",
                        "in": "path",
                        "required": true,
                        "description": "ID of the company to unarchive"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company unarchived successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    },
                    "422": {
                        "description": "Unarchival failure"
                    }
                }
            }
        },
        "/companies/jump": {
            "get": {
                "tags": [
                    "Companies"
                ],
                "operationId": "get_companies_jump",
                "summary": "Jump to a company with integration details",
                "description": "Jump to a company that contains integration details, bypassing the need for API key authentication. Authentication is only required at the time of the jump. This is a convenient way to create links from external integrations to Hudu.",
                "parameters": [
                    {
                        "name": "integration_slug",
                        "type": "string",
                        "in": "query",
                        "required": true,
                        "description": "Identifier of the external integration (e.g., 'cw_manage')"
                    },
                    {
                        "name": "integration_id",
                        "type": "string",
                        "in": "query",
                        "description": "ID of the company in the external integration (e.g., '[ID_HERE]')"
                    },
                    {
                        "name": "integration_identifier",
                        "type": "string",
                        "in": "query",
                        "description": "Identifier of the company in the external integration (used if integration_id is not set)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Jump successful. Example: `https://[MY_URL_HERE]/api/v1/companies/jump?integration_id=[ID_HERE]&integration_slug=cw_manage`"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Company not found"
                    }
                }
            }
        },
        "/cards/lookup": {
            "get": {
                "tags": [
                    "Cards"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "get_cards_lookup",
                "summary": "Lookup cards with external integration details",
                "parameters": [
                    {
                        "name": "integration_slug",
                        "type": "string",
                        "in": "query",
                        "required": true,
                        "description": "Identifier of the external integration"
                    },
                    {
                        "name": "integration_id",
                        "type": "string",
                        "in": "query",
                        "description": "ID in the external integration. Must be present unless integration_identifier is set\n"
                    },
                    {
                        "name": "integration_identifier",
                        "type": "string",
                        "in": "query",
                        "description": "Identifier in the external integration (used if integration_id is not set)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cards found successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "integrator_cards": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Integrator_Card"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "Searches for cards associated with the specified external integration details. Returns a 200 status code if successful."
            }
        },
        "/cards/jump": {
            "get": {
                "tags": [
                    "Cards"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "operationId": "get_cards_jump",
                "summary": "Jump to an asset with integration details without API key authentication, only requiring authentication at the time of jump.",
                "parameters": [
                    {
                        "name": "integration_type",
                        "type": "string",
                        "in": "query",
                        "required": true,
                        "description": "Type of card. Contact support@usehudu.com for a list of types for specific integrations."
                    },
                    {
                        "name": "integration_slug",
                        "type": "string",
                        "in": "query",
                        "required": true,
                        "description": "Identifier of the external integration."
                    },
                    {
                        "name": "integration_id",
                        "type": "string",
                        "in": "query",
                        "description": "ID of the entity in the external integration."
                    },
                    {
                        "name": "integration_identifier",
                        "type": "string",
                        "in": "query",
                        "description": "Identifier of the entity in the external integration (if integration_id is not set)."
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "The `/cards/jump` endpoint provides an easy way to create links from external integrations to Hudu. Below are examples of how to jump from a Syncro contact and a Watchman Monitoring computer to the corresponding asset in Hudu:\n- Syncro example:\n  ```\n  https://[MY_URL_HERE]/api/v1/cards/jump?integration_id=XXXX&integration_slug=syncro&integration_type=contact\n  ```\n\n- Watchman Monitoring example (using identifier instead of ID):\n  ```\n  https://[MY_URL_HERE]/api/v1/cards/jump?integration_identifier=XXXX&integration_slug=watchman&integration_type=computer\n  ```\n"
            }
        },
        "/expirations": {
            "get": {
                "tags": [
                    "Expirations"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_expirations",
                "summary": "Retrieve expirations for the account",
                "parameters": [
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The current page of results to retrieve"
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "format": "int64",
                        "in": "query",
                        "description": "Filter expirations by company ID"
                    },
                    {
                        "name": "expiration_type",
                        "type": "string",
                        "in": "query",
                        "description": "Filter expirations by expiration type (undeclared, domain, ssl_certificate, warranty, asset_field, article_expiration)\n"
                    },
                    {
                        "name": "resource_id",
                        "type": "integer",
                        "format": "int64",
                        "in": "query",
                        "description": "Filter logs by resource ID; must be coupled with resource_type"
                    },
                    {
                        "name": "resource_type",
                        "type": "string",
                        "in": "query",
                        "description": "Filter logs by resource type (Asset, AssetPassword, Company, Article, etc.); must be coupled with resource_id\n"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The number of results to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of expirations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Expiration"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "Retrieve a list of expirations for the account, with optional filtering and pagination."
            }
        },
        "/exports": {
            "post": {
                "tags": [
                    "Exports"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_exports",
                "summary": "Initiate an export of a company",
                "description": "Initiate an export of a company with specified settings and filters.",
                "parameters": [
                    {
                        "name": "export",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "include_websites": {
                                    "type": "boolean",
                                    "description": "True or False to indicate if websites should be included in the export"
                                },
                                "include_passwords": {
                                    "type": "boolean",
                                    "description": "True or False to indicate if passwords should be included in the export"
                                },
                                "company_id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Specify the company to export"
                                },
                                "format": {
                                    "type": "string",
                                    "enum": [
                                        "pdf",
                                        "csv",
                                        "s3"
                                    ],
                                    "description": "Specify the export format: pdf, csv, or s3"
                                },
                                "asset_layout_ids": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "description": "Array of asset layout IDs to include in the export"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export initiated successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/s3_exports": {
            "post": {
                "tags": [
                    "S3 Exports"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_s3_exports",
                "summary": "Initiate a s3 export.",
                "description": "Initiate a s3 export. You must configure your S3-compatible credentials in the account settings page before using this endpoint.",
                "responses": {
                    "200": {
                        "description": "Export initiated successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/folders": {
            "get": {
                "tags": [
                    "Folders"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_folders",
                "summary": "Retrieve a list of folders",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter folders by name"
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "format": "int64",
                        "in": "query",
                        "description": "Filter folders by company ID"
                    },
                    {
                        "name": "in_company",
                        "type": "boolean",
                        "in": "query",
                        "description": "When true, only returns company-specific KB articles"
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The current page of results to retrieve"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The number of results to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of folders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Folder"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Folders"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_folders",
                "summary": "Create a folder",
                "parameters": [
                    {
                        "name": "folder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the folder"
                                },
                                "icon": {
                                    "type": "string",
                                    "description": "Icon for the folder"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description of the folder"
                                },
                                "parent_folder_id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "ID of the parent folder (optional)"
                                },
                                "company_id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "ID of the associated company (optional)"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Folder created successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "description": "Create a new folder with the provided information."
            }
        },
        "/folders/{id}": {
            "get": {
                "tags": [
                    "Folders"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_folders_id",
                "summary": "Retrieve a folder by ID",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested folder"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Folder not found"
                    }
                },
                "description": "Retrieve a folder by its ID."
            },
            "put": {
                "tags": [
                    "Folders"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "put_folders_id",
                "summary": "Update a folder",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the folder to update"
                    },
                    {
                        "name": "folder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the folder"
                                },
                                "icon": {
                                    "type": "string",
                                    "description": "Icon for the folder"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description of the folder"
                                },
                                "parent_folder_id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "ID of the parent folder (optional)"
                                },
                                "company_id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "ID of the associated company (optional)"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Folder updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Folder not found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "description": "Update an existing folder with the provided information."
            },
            "delete": {
                "tags": [
                    "Folders"
                ],
                "operationId": "delete_folders_id",
                "summary": "Delete a folder",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the folder to delete"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Folder deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Folder not found"
                    }
                },
                "description": "Delete a folder by its ID."
            }
        },
        "/ip_addresses": {
            "get": {
                "tags": [
                    "IP Addresses"
                ],
                "summary": "Get a list of IP addresses",
                "description": "Retrieve a list of all IP addresses, with optional filtering.",
                "operationId": "getIpAddresses",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "network_id",
                        "in": "query",
                        "description": "Filter by network ID",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Filter by IP address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by IP address status",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fqdn",
                        "in": "query",
                        "description": "Filter by FQDN",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "asset_id",
                        "in": "query",
                        "description": "Filter by asset ID",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "company_id",
                        "in": "query",
                        "description": "Filter by company ID",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "created_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter IP addresses created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter IP addresses updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of IP addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IpAddress"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "IP Addresses"
                ],
                "summary": "Create a new IP address",
                "description": "Add a new IP address to the system.",
                "operationId": "createIpAddress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ip_address",
                        "description": "IP Address object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "IP address created",
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                }
            }
        },
        "/ip_addresses/{id}": {
            "get": {
                "tags": [
                    "IP Addresses"
                ],
                "summary": "Get a single IP address",
                "description": "Retrieve details of a specific IP address by ID.",
                "operationId": "getIpAddressById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "description": "IP Address ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of an IP address",
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "IP address not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "IP Addresses"
                ],
                "summary": "Update an existing IP address",
                "description": "Modify details of an existing IP address.",
                "operationId": "updateIpAddress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "description": "IP Address ID"
                    },
                    {
                        "in": "body",
                        "name": "ip_address",
                        "description": "IP Address object with updated data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IP address updated",
                        "schema": {
                            "$ref": "#/definitions/IpAddress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "IP address not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "IP Addresses"
                ],
                "summary": "Delete an IP address",
                "description": "Remove an IP address from the system.",
                "operationId": "deleteIpAddress",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "description": "IP Address ID"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "IP address deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "IP address not found"
                    }
                }
            }
        },
        "/magic_dash": {
            "get": {
                "tags": [
                    "Magic Dash"
                ],
                "operationId": "get_magic_dash",
                "summary": "Retrieve a list of Magic Dash Items",
                "parameters": [
                    {
                        "name": "title",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by title"
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "format": "int64",
                        "in": "query",
                        "description": "Filter by company ID"
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "Retrieve the current page of results"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "Set the number of results to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of Magic Dash Items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MagicDash"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Magic Dash"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "post_magic_dash",
                "summary": "Create or update a Magic Dash Item",
                "parameters": [
                    {
                        "name": "magic_dash_item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "The primary content to be displayed on the Magic Dash Item"
                                },
                                "company_name": {
                                    "type": "string",
                                    "description": "The company name attribute used to match an existing company"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "The title attribute, used for matching existing Magic Dash Items with the same title and company_name"
                                },
                                "icon": {
                                    "type": "string",
                                    "description": "A FontAwesome icon for the header of the Magic Dash Item (e.g., fas fa-circle)"
                                },
                                "image_url": {
                                    "type": "string",
                                    "description": "A URL for an image to be used in the header of the Magic Dash Item"
                                },
                                "content_link": {
                                    "type": "string",
                                    "description": "A link to an external website associated with the Magic Dash Item's content"
                                },
                                "content": {
                                    "type": "string",
                                    "description": "HTML content (tables, images, videos, etc.) to be displayed in the Magic Dash Item"
                                },
                                "shade": {
                                    "type": "string",
                                    "description": "An optional color for the Magic Dash Item to represent different contextual states (e.g., success, danger)"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Magic Dash Item created or updated successfully",
                        "schema": {
                            "$ref": "#/definitions/MagicDash"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Magic Dash"
                ],
                "operationId": "delete_magic_dash",
                "summary": "Delete a Magic Dash Item without an ID",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "title",
                        "type": "string",
                        "in": "formData",
                        "required": true,
                        "description": "The title attribute of the Magic Dash Item to be deleted"
                    },
                    {
                        "name": "company_name",
                        "type": "string",
                        "in": "formData",
                        "required": true,
                        "description": "The company name attribute of the Magic Dash Item to be deleted"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                },
                "description": "  <p>You can delete a Magic Dash item by sending the same parameters you do to create a magic dash item, but with a DELETE REST request.</p>\n  <pre>\n  {\n    \"title\": \"Microsoft 365\",\n    \"company_name\": \"AcmeCorp\"\n  }\n  </pre>\n"
            }
        },
        "/magic_dash/{id}": {
            "delete": {
                "tags": [
                    "Magic Dash"
                ],
                "summary": "Delete a Magic Dash item with the specified ID",
                "description": "This endpoint allows you to delete a Magic Dash item by providing its unique ID.",
                "operationId": "deleteMagicDashItemById",
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique ID of the Magic Dash item to be deleted",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Magic Dash item not found"
                    },
                    "422": {
                        "description": "Unable to process the request"
                    }
                }
            }
        },
        "/matchers": {
            "get": {
                "tags": [
                    "Matchers"
                ],
                "summary": "List matchers for an integration",
                "description": "Retrieve a list of matchers for a specific integration based on provided filters.",
                "operationId": "getMatchers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "integration_id",
                        "type": "integer",
                        "in": "query",
                        "required": true,
                        "description": "The ID of the integration, which can be found in the URL when editing an integration."
                    },
                    {
                        "name": "matched",
                        "type": "boolean",
                        "in": "query",
                        "description": "Filter by whether the company has already been matched."
                    },
                    {
                        "name": "sync_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by the ID of the record in the integration (used if the integration's ID is an integer)."
                    },
                    {
                        "name": "identifier",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by the identifier in the integration (used if the integration's ID is a string)."
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "in": "query",
                        "description": "The current page of results."
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "in": "query",
                        "description": "The number of results to return per page."
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by company ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of matchers",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "matchers": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Matcher"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/matchers/{id}": {
            "put": {
                "tags": [
                    "Matchers"
                ],
                "summary": "Update a Matcher",
                "description": "Update the specified Matcher's attributes.",
                "operationId": "updateMatcherById",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the Matcher to update."
                    },
                    {
                        "name": "matcher",
                        "in": "body",
                        "description": "Matcher update attributes",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "company_id": {
                                    "type": "integer",
                                    "description": "The updated company ID."
                                },
                                "potential_company_id": {
                                    "type": "integer",
                                    "description": "The updated potential company ID."
                                },
                                "sync_id": {
                                    "type": "string",
                                    "description": "The updated sync ID."
                                },
                                "identifier": {
                                    "type": "string",
                                    "description": "The updated identifier."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matcher successfully updated",
                        "schema": {
                            "$ref": "#/definitions/Matcher"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Matcher not found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Matchers"
                ],
                "summary": "Delete a Matcher",
                "description": "Delete the specified Matcher by its ID. Returns a 204 if successful.",
                "operationId": "deleteMatcherById",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the Matcher to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Matcher successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Matcher not found"
                    }
                }
            }
        },
        "/networks": {
            "get": {
                "tags": [
                    "Networks"
                ],
                "summary": "Get a list of networks",
                "description": "Retrieve a list of all networks, with optional filtering.",
                "operationId": "getNetworks",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "company_id",
                        "in": "query",
                        "description": "Filter by company ID",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "slug",
                        "in": "query",
                        "description": "Filter by network slug",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by network name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "network_type",
                        "in": "query",
                        "description": "Filter by network type",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Filter by network address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "location_id",
                        "in": "query",
                        "description": "Filter by location ID",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "created_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter networks created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter networks updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of networks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Network"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Networks"
                ],
                "summary": "Create a new network",
                "description": "Add a new network to the system.",
                "operationId": "createNetwork",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "network",
                        "description": "Network object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Network created",
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                }
            }
        },
        "/networks/{id}": {
            "get": {
                "tags": [
                    "Networks"
                ],
                "summary": "Get a single network",
                "description": "Retrieve details of a specific network by ID.",
                "operationId": "getNetworkById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "description": "Network ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of a network",
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Network not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Networks"
                ],
                "summary": "Update an existing network",
                "description": "Modify details of an existing network.",
                "operationId": "updateNetwork",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "description": "Network ID"
                    },
                    {
                        "in": "body",
                        "name": "network",
                        "description": "Network object with updated data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network updated",
                        "schema": {
                            "$ref": "#/definitions/Network"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Network not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Networks"
                ],
                "summary": "Delete a network",
                "description": "Remove a network from the system.",
                "operationId": "deleteNetwork",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "description": "Network ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network successfully deleted",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Network successfully deleted."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Network not found"
                    }
                }
            }
        },
        "/password_folders": {
            "get": {
                "tags": [
                    "Password Folders"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_password_folders",
                "summary": "Retrieve a list of password folders",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter folders by name"
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "format": "int64",
                        "in": "query",
                        "description": "Filter folders by company ID"
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by search query"
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The current page of results to retrieve"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The number of results to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of password folders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Password_Folder"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/password_folders/{id}": {
            "get": {
                "tags": [
                    "Password Folders"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_password_folders_id",
                "summary": "Retrieve a password folder by ID",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested password folder"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password Folder retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/Password_Folder"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Password Folder not found"
                    }
                },
                "description": "Retrieve a password folder by its ID."
            }
        },
        "/procedures": {
            "get": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Get a list of Procedures (Processes)",
                "description": "Retrieve a list of procedures filtered by the provided parameters.",
                "operationId": "getProcedures",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by the name of the procedure."
                    },
                    {
                        "name": "company_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by the associated company ID."
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "in": "query",
                        "description": "The current page of results."
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "in": "query",
                        "description": "The number of results to return per page."
                    },
                    {
                        "name": "slug",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by the URL slug of the procedure."
                    },
                    {
                        "name": "global_template",
                        "in": "query",
                        "description": "Filter for global templates. 'true' for global templates, 'false' for company-specific procedures",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    {
                        "name": "company_template",
                        "in": "query",
                        "description": "Filter for company-specific templates. Provide the company ID to filter templates for that company",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "parent_procedure_id",
                        "in": "query",
                        "description": "Filter for child procedures of a specific parent procedure",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of procedures",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "procedures": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Procedure"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Create a new Procedure (Process)",
                "description": "Create a new procedure without any tasks",
                "operationId": "createProcedure",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Procedure attributes",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the procedure"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description of the procedure"
                                },
                                "company_id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "The ID of the company this procedure should be transferred to. Set to null to make this a global template.",
                                    "nullable": true
                                },
                                "company_template": {
                                    "type": "boolean",
                                    "description": "When true, sets both template and remove_completion_ability to true. When false, sets both to false."
                                }
                            },
                            "required": [
                                "name"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/procedures/{id}": {
            "get": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Get a Procedure (Process)",
                "description": "Retrieve a procedure by its ID.",
                "operationId": "getProcedureById",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the requested procedure."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested procedure",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Update an existing Procedure",
                "description": "Edit the name, description, and template status of an existing procedure.",
                "operationId": "updateProcedure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the procedure to update."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The new name for the procedure."
                                },
                                "description": {
                                    "type": "string",
                                    "description": "The new description for the procedure."
                                },
                                "company_template": {
                                    "type": "boolean",
                                    "description": "When true, sets both template and remove_completion_ability to true. When false, sets both to false."
                                },
                                "company_id": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "The ID of the company this procedure should be transferred to. Set to null to make this a global template that's available to all companies.",
                                    "nullable": true
                                },
                                "archived": {
                                    "type": "boolean",
                                    "description": "When true, archives the procedure by setting discarded_at. When false, unarchives the procedure by clearing discarded_at."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Procedure successfully updated",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Delete a Procedure",
                "description": "Remove a procedure by its ID.",
                "operationId": "deleteProcedure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the procedure to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Procedure successfully deleted",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/procedures/{id}/create_from_template": {
            "post": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Create a Procedure from Template",
                "description": "Create a new procedure instance from an existing template. If company_id is not provided, it creates a global template; otherwise, it creates a company-specific template.",
                "operationId": "createProcedureFromTemplate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the template procedure to duplicate."
                    },
                    {
                        "name": "company_id",
                        "in": "query",
                        "type": "integer",
                        "description": "The ID of the company for the new procedure. If not provided, a global template will be created."
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "The new name for the procedure."
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "type": "string",
                        "description": "The new description for the procedure."
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Procedure successfully created from template",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Template not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/procedures/{id}/duplicate": {
            "post": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Duplicate an existing Procedure",
                "description": "Create a new procedure by duplicating an existing one, with optional modifications.",
                "operationId": "duplicateProcedure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the procedure to duplicate."
                    },
                    {
                        "name": "company_id",
                        "in": "query",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the company for the new duplicated procedure."
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "The new name for the duplicated procedure (optional)."
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "type": "string",
                        "description": "The new description for the duplicated procedure (optional)."
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Procedure successfully duplicated",
                        "schema": {
                            "$ref": "#/definitions/Procedure"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Original procedure not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/procedures/{id}/kickoff": {
            "post": {
                "tags": [
                    "Procedures"
                ],
                "summary": "Kickoff a Procedure (Process)",
                "description": "Start a process from a company process. Optionally, attach the process to an asset by providing an asset ID, or change the process name by passing a new name.\n",
                "operationId": "kickoffProcedureById",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the requested procedure."
                    },
                    {
                        "name": "asset_id",
                        "type": "integer",
                        "in": "query",
                        "description": "The ID of the asset to attach the process to (optional)."
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "The new name for the procedure (optional)."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "procedure": {
                                        "type": "object",
                                        "properties": {
                                            "asset_id": {
                                                "type": "integer",
                                                "example": 707
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Procedure Task successfully deleted",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Procedure Task not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/procedure_tasks": {
            "get": {
                "tags": [
                    "Procedure Tasks"
                ],
                "summary": "Get a list of Procedure Tasks",
                "description": "Retrieve a list of procedure tasks filtered by procedure ID, name, or company ID.",
                "operationId": "getProcedureTasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "procedure_id",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by the procedure ID."
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by the name of the task."
                    },
                    {
                        "name": "company_id",
                        "in": "query",
                        "type": "integer",
                        "description": "Filter by the company ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of procedure tasks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProcedureTask"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Procedure Tasks"
                ],
                "summary": "Create a new Procedure Task",
                "description": "Create a new task with specified attributes.",
                "operationId": "createProcedureTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "procedure_task",
                        "description": "Procedure Task object to be created",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the task."
                                },
                                "description": {
                                    "type": "string",
                                    "description": "A detailed description of the task."
                                },
                                "procedure_id": {
                                    "type": "integer",
                                    "description": "The ID of the procedure this task belongs to."
                                },
                                "position": {
                                    "type": "integer",
                                    "description": "The position of the task in the procedure."
                                },
                                "user_id": {
                                    "type": "integer",
                                    "description": "The ID of the user assigned to the task."
                                },
                                "due_date": {
                                    "type": "string",
                                    "format": "date",
                                    "description": "The due date for the task."
                                },
                                "priority": {
                                    "type": "string",
                                    "description": "The priority level of the task.",
                                    "enum": [
                                        "unsure",
                                        "low",
                                        "normal",
                                        "high",
                                        "urgent"
                                    ]
                                },
                                "assigned_users": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "description": "An array of user IDs assigned to the task."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Procedure Task created successfully",
                        "schema": {
                            "$ref": "#/definitions/ProcedureTask"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/procedure_tasks/{id}": {
            "get": {
                "tags": [
                    "Procedure Tasks"
                ],
                "summary": "Get a Procedure Task by ID",
                "description": "Retrieve a specific procedure task by its ID.",
                "operationId": "getProcedureTaskById",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the procedure task to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested procedure task",
                        "schema": {
                            "$ref": "#/definitions/ProcedureTask"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Procedure task not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Procedure Tasks"
                ],
                "summary": "Update a Procedure Task",
                "description": "Update an existing task with specified attributes.",
                "operationId": "updateProcedureTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the procedure task to update."
                    },
                    {
                        "in": "body",
                        "name": "procedure_task",
                        "description": "Procedure Task object with updated attributes",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the task."
                                },
                                "description": {
                                    "type": "string",
                                    "description": "A detailed description of the task."
                                },
                                "completed": {
                                    "type": "boolean",
                                    "description": "When true, marks the task as completed."
                                },
                                "procedure_id": {
                                    "type": "integer",
                                    "description": "The ID of the procedure this task belongs to."
                                },
                                "position": {
                                    "type": "integer",
                                    "description": "The position of the task in the procedure."
                                },
                                "user_id": {
                                    "type": "integer",
                                    "description": "The ID of the user assigned to the task."
                                },
                                "due_date": {
                                    "type": "string",
                                    "format": "date",
                                    "description": "The due date for the task."
                                },
                                "priority": {
                                    "type": "string",
                                    "description": "The priority level of the task.",
                                    "enum": [
                                        "unsure",
                                        "low",
                                        "normal",
                                        "high",
                                        "urgent"
                                    ]
                                },
                                "assigned_users": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "description": "An array of user IDs assigned to the task."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Procedure Task updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ProcedureTask"
                        }
                    },
                    "404": {
                        "description": "Procedure Task not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Procedure Tasks"
                ],
                "summary": "Delete a Procedure Task",
                "description": "Remove a procedure task by its ID.",
                "operationId": "deleteProcedureTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The ID of the procedure task to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Procedure Task successfully deleted",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Procedure Task not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/public_photos": {
            "get": {
                "tags": [
                    "Public Photos"
                ],
                "summary": "Get a list of public photos",
                "description": "Retrieve a list of public photos with pagination options.",
                "operationId": "getPublicPhotos",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "type": "integer",
                        "in": "query",
                        "description": "The current page of results."
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "in": "query",
                        "description": "The number of results to return per page."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of public photos",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "public_photos": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/PublicPhoto"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Public Photos"
                ],
                "summary": "Create a public photo",
                "description": "Upload a public photo and associate it with a specific record type and ID. This will not upload the photo to the photos module or sidebar of the associated record (Upcoming Feature). This endpoint exists to add photos to articles and asset notes.",
                "operationId": "createPublicPhoto",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "photo",
                        "type": "file",
                        "in": "formData",
                        "required": true,
                        "description": "The photo file to be uploaded (must be an image)."
                    },
                    {
                        "name": "record_type",
                        "type": "string",
                        "in": "formData",
                        "required": true,
                        "description": "The type of record the photo will be associated with (e.g., Article)."
                    },
                    {
                        "name": "record_id",
                        "type": "integer",
                        "in": "formData",
                        "required": true,
                        "description": "The ID of the record the photo will be associated with."
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Public photo successfully created",
                        "schema": {
                            "$ref": "#/definitions/PublicPhoto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/public_photos/{id}": {
            "put": {
                "tags": [
                    "Public Photos"
                ],
                "summary": "Update a public photo",
                "description": "Update the associated record type and ID for a specific public photo.",
                "operationId": "updatePublicPhoto",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the public photo to update."
                    },
                    {
                        "name": "record_type",
                        "type": "string",
                        "in": "formData",
                        "required": true,
                        "description": "The updated type of record the photo is associated with (e.g., Article)."
                    },
                    {
                        "name": "record_id",
                        "type": "integer",
                        "in": "formData",
                        "required": true,
                        "description": "The updated ID of the record the photo is associated with."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Public photo successfully updated",
                        "schema": {
                            "$ref": "#/definitions/PublicPhoto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/rack_storages": {
            "get": {
                "tags": [
                    "Rack Storages"
                ],
                "operationId": "get_rack_storages",
                "summary": "Get a list of Rack Storages",
                "parameters": [
                    {
                        "name": "company_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by company id"
                    },
                    {
                        "name": "location_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by location id"
                    },
                    {
                        "name": "height",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by rack height"
                    },
                    {
                        "name": "min_width",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by minimum rack width"
                    },
                    {
                        "name": "max_width",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by maximum rack width"
                    },
                    {
                        "name": "created_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter rack storages created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter rack storages updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RackStorage"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Rack Storages"
                ],
                "operationId": "post_rack_storages",
                "summary": "Create a new Rack Storage",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "rack_storage",
                        "description": "Rack Storage object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Rack Storage created successfully",
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/rack_storages/{id}": {
            "get": {
                "tags": [
                    "Rack Storages"
                ],
                "operationId": "get_rack_storages_id",
                "summary": "Get a Rack Storage",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested rack storage"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Rack Storages"
                ],
                "operationId": "put_rack_storages_id",
                "summary": "Update a Rack Storage",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "rack_storage",
                        "description": "Rack Storage object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rack Storage updated successfully",
                        "schema": {
                            "$ref": "#/definitions/RackStorage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Rack Storages"
                ],
                "operationId": "delete_rack_storages_id",
                "summary": "Delete a Rack Storage",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested rack storage"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rack Storage deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/rack_storage_items": {
            "get": {
                "tags": [
                    "Rack Storage Items"
                ],
                "operationId": "get_rack_storage_items",
                "summary": "Get a list of Rack Storage Items",
                "parameters": [
                    {
                        "name": "rack_storage_role_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by Rack Storage Role ID"
                    },
                    {
                        "name": "asset_id",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by Asset ID"
                    },
                    {
                        "name": "start_unit",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by Start Unit"
                    },
                    {
                        "name": "end_unit",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by End Unit"
                    },
                    {
                        "name": "status",
                        "type": "integer",
                        "in": "query",
                        "description": "Filter by Status"
                    },
                    {
                        "name": "side",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by Side. Front or Rear"
                    },
                    {
                        "name": "created_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter rack storage items created within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter rack storage items updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters companies updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters companies updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters companies updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RackStorageItem"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Rack Storage Items"
                ],
                "operationId": "post_rack_storage_items",
                "summary": "Create a Rack Storage Item",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "rack_storage_item",
                        "description": "Rack Storage Item object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Rack Storage Item created successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/rack_storage_items/{id}": {
            "get": {
                "tags": [
                    "Rack Storage Items"
                ],
                "operationId": "get_rack_storage_items_id",
                "summary": "Get a Rack Storage Item",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested Rack Storage Item"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Rack Storage Items"
                ],
                "operationId": "put_rack_storage_items_id",
                "summary": "Update a Rack Storage Item",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "ID of the Rack Storage Item that needs to be updated"
                    },
                    {
                        "in": "body",
                        "name": "rack_storage_item",
                        "description": "Rack Storage Item object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rack Storage Item updated successfully",
                        "schema": {
                            "$ref": "#/definitions/RackStorageItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Rack Storage Items"
                ],
                "operationId": "delete_rack_storage_items_id",
                "summary": "Delete a Rack Storage Item",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the Rack Storage Item that needs to be deleted"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rack Storage Item deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/relations": {
            "get": {
                "tags": [
                    "Relations"
                ],
                "summary": "Get a list of all relations",
                "description": "Retrieve a list of relations with filtering options.",
                "operationId": "get_relations",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "type": "integer",
                        "in": "query",
                        "description": "Get the current page of results"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "in": "query",
                        "description": "Number of results to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of relations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Relation"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Relations"
                ],
                "summary": "Create a Relation",
                "description": "Create a new relation between two entities.",
                "operationId": "post_relations",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "relation",
                        "in": "body",
                        "description": "Relation to create",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "toable_id": {
                                    "type": "integer",
                                    "description": "The ID of the destination entity in the relation"
                                },
                                "toable_type": {
                                    "type": "string",
                                    "description": "The type of the destination entity in the relation (Asset, Website, Procedure, AssetPassword, Company, Article)"
                                },
                                "fromable_id": {
                                    "type": "integer",
                                    "description": "The ID of the origin entity in the relation"
                                },
                                "fromable_type": {
                                    "type": "string",
                                    "description": "The type of the origin entity in the relation (Asset, Website, Procedure, AssetPassword, Company, Article)"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Provide a description for the relation to explain the relationship between the two entities"
                                },
                                "is_inverse": {
                                    "type": "boolean",
                                    "description": "When a relation is created, it will also create another relation that is the inverse. When this is true, this relation is the inverse."
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Relation created successfully",
                        "schema": {
                            "$ref": "#/definitions/Relation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/relations/{id}": {
            "delete": {
                "tags": [
                    "Relations"
                ],
                "summary": "Delete a Relation",
                "description": "Remove a relation between two entities by its ID.",
                "operationId": "delete_relations_id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the Relation to be deleted"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Relation deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/uploads": {
            "get": {
                "tags": [
                    "Uploads"
                ],
                "operationId": "get_uploads",
                "summary": "Get a list of all uploads",
                "responses": {
                    "200": {
                        "description": "A list of uploads",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Upload"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Uploads"
                ],
                "operationId": "post_uploads",
                "summary": "Upload a file",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "name": "file",
                        "type": "file",
                        "in": "formData",
                        "required": true,
                        "description": "The file to upload"
                    },
                    {
                        "name": "upload[uploadable_id]",
                        "type": "integer",
                        "in": "formData",
                        "required": true,
                        "description": "ID of the record to be attached to."
                    },
                    {
                        "name": "upload[uploadable_type]",
                        "type": "string",
                        "in": "formData",
                        "required": true,
                        "description": "Type of record to be attached to. (Asset, Website, Procedure, AssetPassword, Company, Article)"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully uploaded",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/uploads/{id}": {
            "get": {
                "tags": [
                    "Uploads"
                ],
                "operationId": "get_uploads_id",
                "summary": "Get a specific upload",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested upload"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Uploads"
                ],
                "operationId": "delete_uploads_id",
                "summary": "Delete an upload",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested upload"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_users",
                "summary": "Retrieve a list of users",
                "parameters": [
                    {
                        "name": "first_name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter users by first name"
                    },
                    {
                        "name": "last_name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter users by last name"
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "in": "query",
                        "description": "Search across first name and last name"
                    },
                    {
                        "name": "portal_member_company_id",
                        "type": "integer",
                        "format": "int64",
                        "in": "query",
                        "description": "Filter users by company ID. Only portal members have a company ID."
                    },
                    {
                        "name": "archived",
                        "type": "boolean",
                        "in": "query",
                        "description": "Filter by archived status"
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "format": "email",
                        "in": "query",
                        "description": "Filter users by email address"
                    },
                    {
                        "name": "security_level",
                        "type": "string",
                        "in": "query",
                        "description": "Filter users by security level. Security levels are 'super_admin', 'admin', 'spectator', 'editor', 'author', 'portal_member', and 'portal_admin'"
                    },
                    {
                        "name": "page",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The current page of results to retrieve"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "format": "int32",
                        "in": "query",
                        "description": "The number of results to return per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "get_user_by_id",
                "summary": "Retrieve a user by ID",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "format": "int64",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested user"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "description": "Retrieve a user by its ID."
            }
        },
        "/websites": {
            "get": {
                "tags": [
                    "Websites"
                ],
                "operationId": "get_websites",
                "summary": "Get a list of all websites",
                "parameters": [
                    {
                        "name": "page",
                        "type": "integer",
                        "in": "query",
                        "description": "Get current page of results"
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "in": "query",
                        "description": "Filter websites by name"
                    },
                    {
                        "name": "page_size",
                        "type": "integer",
                        "in": "query",
                        "description": "Number of results to return per page"
                    },
                    {
                        "name": "slug",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by URL slug"
                    },
                    {
                        "name": "search",
                        "type": "string",
                        "in": "query",
                        "description": "Filter by search query"
                    },
                    {
                        "name": "updated_at",
                        "type": "string",
                        "in": "query",
                        "description": "Filter websites updated within a range or at an exact time. Format: 'start_datetime,end_datetime' for range, 'exact_datetime' for exact match. Both 'start_datetime' and 'end_datetime' should be in ISO 8601 format. If 'start_datetime' is provided and 'end_datetime' is blank, it filters websites updated from 'start_datetime' until now. Example: '2023-06-07T12:34:56Z,' If 'end_datetime' is provided and 'start_datetime' is blank, it filters websites updated from the past until 'end_datetime'. Example: ',2023-06-07T12:34:56Z' If both 'start_datetime' and 'end_datetime' are provided, it filters websites updated within that range. Example: '2023-06-01T12:34:56Z,2023-06-07T12:34:56Z'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of websites",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Website"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Websites"
                ],
                "summary": "Create a Website",
                "operationId": "post_websites",
                "parameters": [
                    {
                        "name": "website",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "company_id": {
                                    "type": "integer",
                                    "description": "Used to associate website with company"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name or URL of the website"
                                },
                                "notes": {
                                    "type": "string",
                                    "description": "Add additional notes to a website"
                                },
                                "paused": {
                                    "type": "boolean",
                                    "description": "When true, website monitoring is paused"
                                },
                                "disable_dns": {
                                    "type": "boolean",
                                    "description": "When true, DNS monitoring is paused"
                                },
                                "disable_ssl": {
                                    "type": "boolean",
                                    "description": "When true, SSL certificate monitoring is paused"
                                },
                                "disable_whois": {
                                    "type": "boolean",
                                    "description": "When true, WHOIS monitoring is paused"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            }
        },
        "/websites/{id}": {
            "get": {
                "tags": [
                    "Websites"
                ],
                "consumes": [
                    "application/json"
                ],
                "operationId": "get_websites_id",
                "summary": "Get a Website",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested website"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Website"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Websites"
                ],
                "consumes": [
                    "application/json"
                ],
                "summary": "Update a Website",
                "operationId": "put_websites_id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "ID of the requested website"
                    },
                    {
                        "name": "website",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "company_id": {
                                    "type": "integer",
                                    "description": "Used to associate website with company"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name or URL of the website"
                                },
                                "notes": {
                                    "type": "string",
                                    "description": "Add additional notes to a website"
                                },
                                "paused": {
                                    "type": "boolean",
                                    "description": "When true, website monitoring is paused"
                                },
                                "disable_dns": {
                                    "type": "boolean",
                                    "description": "When true, DNS monitoring is paused"
                                },
                                "disable_ssl": {
                                    "type": "boolean",
                                    "description": "When true, SSL certificate monitoring is paused"
                                },
                                "disable_whois": {
                                    "type": "boolean",
                                    "description": "When true, WHOIS monitoring is paused"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Website"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unable to process request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Websites"
                ],
                "operationId": "delete_websites_id",
                "summary": "Delete a Website",
                "parameters": [
                    {
                        "name": "id",
                        "type": "integer",
                        "in": "path",
                        "required": true,
                        "description": "ID of the requested website"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        }
    },
    "definitions": {
        "Article": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the article."
                },
                "slug": {
                    "type": "string",
                    "description": "The url slug of the article."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the article."
                },
                "draft": {
                    "type": "boolean",
                    "description": "A flag that signifies if the article is a draft."
                },
                "content": {
                    "type": "string",
                    "description": "The HTML content of the article."
                },
                "url": {
                    "type": "string",
                    "description": "The url of the article."
                },
                "object_type": {
                    "type": "string",
                    "description": "The object type is Article."
                },
                "folder_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique folder ID where the article lives."
                },
                "enable_sharing": {
                    "type": "boolean",
                    "description": "A flag that signifies if the article is shareable."
                },
                "share_url": {
                    "type": "string",
                    "description": "A url for shareable articles."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique company ID for non-global articles."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the article was created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the article was last updated."
                },
                "public_photos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of public photos."
                }
            }
        },
        "Asset_Layout": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "slug": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "icon_color": {
                    "type": "string"
                },
                "sidebar_folder_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Can be null."
                },
                "active": {
                    "type": "boolean"
                },
                "include_passwords": {
                    "type": "boolean"
                },
                "include_photos": {
                    "type": "boolean"
                },
                "include_comments": {
                    "type": "boolean"
                },
                "include_files": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Asset_Layout_Field"
                    }
                }
            }
        },
        "Asset_Layout_Field": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "label": {
                    "type": "string"
                },
                "show_in_list": {
                    "type": "boolean"
                },
                "field_type": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean",
                    "description": "Can be null."
                },
                "hint": {
                    "type": "string"
                },
                "min": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Can be null."
                },
                "max": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Can be null."
                },
                "linkable_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "expiration": {
                    "type": "boolean"
                },
                "options": {
                    "type": "string"
                },
                "position": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_destroyed": {
                    "type": "boolean"
                }
            }
        },
        "Asset_Password": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier of the asset password"
                },
                "passwordable_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "ID of the related object (e.g., 'Website') for the password. Can be null."
                },
                "passwordable_type": {
                    "type": "string",
                    "description": "Type of the related object for the password (e.g., 'Asset', 'Website')"
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Identifier of the company to which the password belongs"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the password"
                },
                "username": {
                    "type": "string",
                    "description": "Username associated with the password"
                },
                "slug": {
                    "type": "string",
                    "description": "URL-friendly identifier for the password"
                },
                "description": {
                    "type": "string",
                    "description": "Description or notes related to the password"
                },
                "password": {
                    "type": "string",
                    "description": "The actual password string"
                },
                "otp_secret": {
                    "type": "string",
                    "description": "Secret key for one-time passwords (OTP), if used"
                },
                "password_type": {
                    "type": "string",
                    "description": "Type or category of the password. Can be null."
                },
                "url": {
                    "type": "string",
                    "description": "URL related to the password, if applicable"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the password was created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the password was last updated"
                },
                "password_folder_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "ID of the folder in which the password is stored, if any. Can be null."
                },
                "password_folder_name": {
                    "type": "string",
                    "description": "Name of the folder in which the password is stored, if any. Can be null."
                },
                "login_url": {
                    "type": "string",
                    "description": "URL for the login page associated with the password. Can be null."
                }
            },
            "required": [
                "id",
                "passwordable_type",
                "company_id",
                "name",
                "username",
                "slug",
                "description",
                "password",
                "otp_secret",
                "url"
            ]
        },
        "Asset": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "number",
                    "description": "The unique identifier of the asset"
                },
                "company_id": {
                    "type": "number",
                    "description": "The identifier of the company to which the asset belongs"
                },
                "asset_layout_id": {
                    "type": "number",
                    "description": "The identifier of the asset layout associated with the asset"
                },
                "slug": {
                    "type": "string",
                    "description": "The URL slug used to identify the asset"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the asset"
                },
                "primary_serial": {
                    "type": "string",
                    "description": "The primary serial number of the asset (if available)"
                },
                "primary_mail": {
                    "type": "string",
                    "description": "The primary email associated with the asset (if available)"
                },
                "primary_model": {
                    "type": "string",
                    "description": "The primary model of the asset (if available)"
                },
                "primary_manufacturer": {
                    "type": "string",
                    "description": "The primary manufacturer of the asset (if available)"
                },
                "company_name": {
                    "type": "string",
                    "description": "The name of the company to which the asset belongs"
                },
                "object_type": {
                    "type": "string",
                    "description": "The type of object the asset represents"
                },
                "asset_type": {
                    "type": "string",
                    "description": "The category of the asset"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Indicates whether the asset is archived or not"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the asset page"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the asset was created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the asset was last updated"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "number",
                                "description": "The identifier of the field"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value stored in the field"
                            },
                            "label": {
                                "type": "string",
                                "description": "The label of the field"
                            },
                            "position": {
                                "type": "number",
                                "description": "The position of the field in the asset's layout"
                            }
                        }
                    },
                    "description": "A list of fields associated with the asset"
                },
                "cards": {
                    "type": "array",
                    "description": "A list of cards associated with the asset (if available)",
                    "items": {
                        "$ref": "#/definitions/Integrator_Card"
                    }
                }
            }
        },
        "Integrator_Card": {
            "type": "object",
            "description": "Represents an Integrator Card containing information about an integration with an external system.",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the Integrator Card."
                },
                "integrator_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the associated external integrator."
                },
                "integrator_name": {
                    "type": "string",
                    "description": "The name of the associated external integrator."
                },
                "link": {
                    "type": "string",
                    "description": "The URL to access the integrated external system."
                },
                "primary_field": {
                    "type": "string",
                    "description": "The primary field associated with the Integrator Card, if any. Can be null."
                },
                "data": {
                    "type": "object",
                    "description": "A JSON object containing additional data about the integrated entity."
                },
                "sync_type": {
                    "type": "string",
                    "description": "The type of synchronization with the external system."
                },
                "sync_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the synchronized entity in the external system."
                },
                "sync_identifier": {
                    "type": "string",
                    "description": "The unique identifier or name of the synchronized entity in the external system, if any. Can be null."
                }
            }
        },
        "Company": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the company."
                },
                "slug": {
                    "type": "string",
                    "description": "The URL-friendly identifier of the company."
                },
                "name": {
                    "type": "string",
                    "description": "The full name of the company."
                },
                "nickname": {
                    "type": "string",
                    "description": "The nickname or short name of the company. Can be null."
                },
                "address_line_1": {
                    "type": "string",
                    "description": "The first line of the company's address."
                },
                "address_line_2": {
                    "type": "string",
                    "description": "The second line of the company's address. Can be null."
                },
                "city": {
                    "type": "string",
                    "description": "The city where the company is located."
                },
                "state": {
                    "type": "string",
                    "description": "The state or province where the company is located."
                },
                "zip": {
                    "type": "string",
                    "description": "The zip or postal code of the company's location."
                },
                "country_name": {
                    "type": "string",
                    "description": "The name of the country where the company is located. Can be null."
                },
                "phone_number": {
                    "type": "string",
                    "description": "The company's phone number."
                },
                "company_type": {
                    "type": "string",
                    "description": "The type of the company. Can be null."
                },
                "parent_company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the parent company. Can be null."
                },
                "parent_company_name": {
                    "type": "string",
                    "description": "The name of the parent company. Can be null."
                },
                "fax_number": {
                    "type": "string",
                    "description": "The company's fax number."
                },
                "website": {
                    "type": "string",
                    "description": "The company's website URL."
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes or information about the company. Can be null."
                },
                "archived": {
                    "type": "boolean",
                    "description": "Indicates if the company has been archived."
                },
                "object_type": {
                    "type": "string",
                    "description": "The type of the object, in this case, \"Company\"."
                },
                "id_number": {
                    "type": "string",
                    "description": "A custom set identificaiton number."
                },
                "url": {
                    "type": "string",
                    "description": "The URL path of the company within the application."
                },
                "full_url": {
                    "type": "string",
                    "description": "The full URL of the company within the application."
                },
                "passwords_url": {
                    "type": "string",
                    "description": "The URL for the company's passwords within the application."
                },
                "knowledge_base_url": {
                    "type": "string",
                    "description": "The URL for the company's knowledge base within the application."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the company was created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the company was last updated."
                },
                "integrations": {
                    "type": "array",
                    "description": "A list of integrations associated with the company.",
                    "items": {
                        "$ref": "#/definitions/Company_Integration"
                    }
                }
            }
        },
        "Company_Integration": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the integration."
                },
                "integrator_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the integrator."
                },
                "integrator_name": {
                    "type": "string",
                    "description": "The name of the integrator."
                },
                "sync_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier for the synchronization."
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the integration. Can be null."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the integration."
                },
                "potential_company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the potential company associated with the integration. Can be null."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the company associated with the integration."
                },
                "company_name": {
                    "type": "string",
                    "description": "The name of the company associated with the integration."
                }
            }
        },
        "Expiration": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "number",
                    "description": "The unique identifier for the expiration"
                },
                "date": {
                    "type": "string",
                    "format": "date",
                    "description": "The expiration date"
                },
                "expirationable_type": {
                    "type": "string",
                    "description": "The type of object associated with the expiration (e.g., Website)"
                },
                "expirationable_id": {
                    "type": "number",
                    "description": "The ID of the object associated with the expiration"
                },
                "account_id": {
                    "type": "number",
                    "description": "The account ID associated with the expiration"
                },
                "company_id": {
                    "type": "number",
                    "description": "The company ID associated with the expiration"
                },
                "asset_layout_field_id": {
                    "type": "number",
                    "description": "The asset layout field ID associated with the expiration (if any), Can be null."
                },
                "sync_id": {
                    "type": "number",
                    "description": "The sync ID associated with the expiration (if any). Can be null"
                },
                "discarded_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the expiration was discarded (if any). Can be null."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the expiration was created"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the expiration was last updated"
                },
                "expiration_type": {
                    "type": "string",
                    "description": "The type of expiration (e.g., domain)"
                },
                "asset_field_id": {
                    "type": "number",
                    "description": "The asset field ID associated with the expiration (if any). Can be null."
                }
            },
            "required": [
                "id",
                "date",
                "expirationable_type",
                "expirationable_id",
                "account_id",
                "company_id",
                "expiration_type"
            ]
        },
        "Folder": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the folder"
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the associated company, if any. Can be null."
                },
                "icon": {
                    "type": "string",
                    "description": "The icon associated with the folder. Can be null"
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the folder"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the folder"
                },
                "parent_folder_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the parent folder, if any. Can be null."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of folder creation"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the last folder update"
                }
            },
            "required": [
                "id",
                "name"
            ]
        },
        "IpAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address."
                },
                "status": {
                    "type": "string",
                    "description": "The status of the IP address. Must be one of: unassigned, assigned, reserved, deprecated, dhcp, or slaac"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name associated with the IP address."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the IP address."
                },
                "comments": {
                    "type": "string",
                    "description": "Additional comments about the IP address."
                },
                "asset_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the asset associated with this IP address."
                },
                "network_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the network to which this IP address belongs."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the company that owns this IP address."
                }
            }
        },
        "MagicDash": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier for the MagicDash item"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the MagicDash item"
                },
                "message": {
                    "type": "string",
                    "description": "The message content of the MagicDash item"
                },
                "shade": {
                    "type": "string",
                    "description": "The background shade of the MagicDash item (optional). Can Be null."
                },
                "content_link": {
                    "type": "string",
                    "description": "The link associated with the MagicDash item's content (optional). Can Be null."
                },
                "content": {
                    "type": "string",
                    "description": "The MagicDash item's content (optional). Can Be null."
                },
                "icon": {
                    "type": "string",
                    "description": "The icon associated with the MagicDash item (optional). Can Be null."
                },
                "image_url": {
                    "type": "string",
                    "description": "The URL of the image associated with the MagicDash item (optional). Can Be null."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the associated company"
                },
                "company_name": {
                    "type": "string",
                    "description": "The name of the associated company"
                }
            },
            "required": [
                "id",
                "title",
                "message",
                "company_id",
                "company_name"
            ]
        },
        "Matcher": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 55
                },
                "integrator_id": {
                    "type": "integer",
                    "example": 4
                },
                "integrator_name": {
                    "type": "string",
                    "example": "autotask"
                },
                "sync_id": {
                    "type": "integer",
                    "example": 29683607
                },
                "identifier": {
                    "type": "string",
                    "description": "Can be null."
                },
                "name": {
                    "type": "string",
                    "example": "Green Mile 24"
                },
                "potential_company_id": {
                    "type": "integer",
                    "description": "Can be null."
                },
                "company_id": {
                    "type": "integer",
                    "description": "Can be null."
                },
                "company_name": {
                    "type": "string",
                    "description": "Can be null."
                }
            },
            "required": [
                "id",
                "integrator_id",
                "integrator_name",
                "sync_id",
                "name"
            ]
        },
        "Network": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier for the network."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network."
                },
                "address": {
                    "type": "string",
                    "description": "The network address, typically in CIDR notation."
                },
                "network_type": {
                    "type": "integer",
                    "description": "The type of network, represented as an integer."
                },
                "slug": {
                    "type": "string",
                    "description": "A slug representing the network."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the company that owns this network."
                },
                "location_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the location associated with this network."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the network."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the network was created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the network was last updated."
                }
            }
        },
        "Password_Folder": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the password folder"
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the associated company, if any. Can Be null."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the password folder"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the password folder"
                },
                "slug": {
                    "type": "string",
                    "description": "A slug representing the password folder."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of password folder creation"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the last password folder update"
                }
            }
        },
        "Procedure": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1,
                    "description": "The unique identifier of the procedure."
                },
                "slug": {
                    "type": "string",
                    "example": "api-test-7cbe6a6458e9",
                    "description": "The URL-friendly unique identifier of the procedure."
                },
                "name": {
                    "type": "string",
                    "example": "API TEST",
                    "description": "The name of the procedure."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the procedure. Can Be null."
                },
                "total": {
                    "type": "integer",
                    "example": 0,
                    "description": "The total number of tasks in the procedure."
                },
                "completed": {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of completed tasks in the procedure."
                },
                "url": {
                    "type": "string",
                    "example": "/processes/api-test-7cbe6a6458e9",
                    "description": "The URL for accessing the procedure."
                },
                "object_type": {
                    "type": "string",
                    "example": "Process",
                    "description": "The type of object the procedure represents."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the company this procedure belongs to."
                },
                "company_name": {
                    "type": "string",
                    "example": "test TWO",
                    "description": "The name of the associated company."
                },
                "completion_percentage": {
                    "type": "string",
                    "example": "0%",
                    "description": "The completion percentage of the procedure."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-12-09T22:23:29.894Z",
                    "description": "The date and time when the procedure was created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-12-09T22:23:29.894Z",
                    "description": "The date and time when the procedure was last updated."
                },
                "parent_procedure": {
                    "type": "string",
                    "description": "The parent procedure, if any. Can Be null."
                },
                "asset": {
                    "type": "string",
                    "description": "The associated asset, if any. Can Be null."
                },
                "share_url": {
                    "type": "string",
                    "example": "http://localhost:3000/shared_process/S549vMc8b8PmWWMESwB6qTLC",
                    "description": "The URL for sharing the procedure."
                },
                "procedure_tasks_attributes": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "A list of attributes for the tasks associated with the procedure."
                }
            }
        },
        "ProcedureTask": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the procedure task."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the procedure task."
                },
                "priority": {
                    "type": "string",
                    "description": "The priority level of the task.",
                    "enum": [
                        "unsure",
                        "low",
                        "normal",
                        "high",
                        "urgent"
                    ]
                },
                "completed": {
                    "type": "boolean",
                    "description": "Indicates whether the task is completed."
                },
                "completed_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the task was completed."
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the user assigned to the task, if any."
                },
                "procedure_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the procedure this task belongs to."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the task was created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the task was last updated."
                }
            },
            "required": [
                "id",
                "name",
                "procedure_id"
            ]
        },
        "PublicPhoto": {
            "type": "object",
            "description": "A public photo associated with a record.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the public photo."
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL of the public photo."
                },
                "record_type": {
                    "type": "string",
                    "description": "The type of record the public photo is associated with (e.g., Article)."
                },
                "record_id": {
                    "type": "integer",
                    "description": "The ID of the record the public photo is associated with."
                }
            }
        },
        "RackStorage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the rack storage."
                },
                "location_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the location of the rack storage."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rack storage."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the rack storage."
                },
                "max_wattage": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The maximum wattage the rack storage can handle."
                },
                "starting_unit": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The starting unit of the rack storage."
                },
                "height": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The height of the rack storage."
                },
                "width": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The width of the rack storage."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the rack storage was created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the rack storage was last updated."
                },
                "discarded_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when the rack storage was discarded. Can Be null."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the company."
                }
            }
        },
        "RackStorageItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the rack storage item."
                },
                "rack_storage_role_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the rack storage role."
                },
                "asset_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the asset."
                },
                "start_unit": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The start unit of the rack storage item."
                },
                "end_unit": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The end unit of the rack storage item."
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The status of the rack storage item."
                },
                "side": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The side of the rack storage item."
                },
                "max_wattage": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The maximum wattage of the rack storage item."
                },
                "power_draw": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The power draw of the rack storage item."
                },
                "rack_storage_role_name": {
                    "type": "string",
                    "description": "The name of the rack storage role."
                },
                "reserved_message": {
                    "type": "string",
                    "description": "The reserved message for the rack storage item."
                },
                "rack_storage_role_description": {
                    "type": "string",
                    "description": "The description of the rack storage role."
                },
                "rack_storage_role_hex_color": {
                    "type": "string",
                    "description": "The hex color of the rack storage role."
                },
                "asset_name": {
                    "type": "string",
                    "description": "The name of the asset."
                },
                "asset_url": {
                    "type": "string",
                    "description": "The URL of the asset."
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the rack storage item."
                },
                "company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique ID of the company."
                }
            }
        },
        "Relation": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique identifier of the relation."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the relation (optional). Can Be null."
                },
                "is_inverse": {
                    "type": "boolean",
                    "description": "Indicates whether the relation is inverse or not."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the relation."
                },
                "fromable_id": {
                    "type": "integer",
                    "description": "The ID of the origin entity involved in the relation."
                },
                "fromable_type": {
                    "type": "string",
                    "description": "The type of the origin entity involved in the relation."
                },
                "fromable_url": {
                    "type": "string",
                    "description": "The URL of the origin entity involved in the relation."
                },
                "toable_id": {
                    "type": "integer",
                    "description": "The ID of the destination entity involved in the relation."
                },
                "toable_type": {
                    "type": "string",
                    "description": "The type of the destination entity involved in the relation."
                },
                "toable_url": {
                    "type": "string",
                    "description": "The URL of the destination entity involved in the relation."
                }
            }
        },
        "Website": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique identifier of the website"
                },
                "name": {
                    "type": "string",
                    "description": "The URL of the website"
                },
                "code": {
                    "type": "integer",
                    "description": "The HTTP response code of the website"
                },
                "message": {
                    "type": "string",
                    "description": "A message related to the website's status"
                },
                "slug": {
                    "type": "string",
                    "description": "The URL slug for the website"
                },
                "keyword": {
                    "type": "string",
                    "description": "A keyword associated with the website (optional)"
                },
                "monitor_type": {
                    "type": "integer",
                    "description": "The type of monitoring performed on the website"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the website (e.g., 'ready', 'processing')"
                },
                "monitoring_status": {
                    "type": "string",
                    "description": "The monitoring status of the website (e.g., 'up', 'down')"
                },
                "refreshed_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the website was last refreshed"
                },
                "monitored_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the website was last monitored"
                },
                "headers": {
                    "type": "object",
                    "description": "HTTP headers associated with the website (optional)"
                },
                "paused": {
                    "type": "boolean",
                    "description": "Indicates whether the monitoring of the website is paused"
                },
                "sent_notifications": {
                    "type": "boolean",
                    "description": "Indicates whether notifications related to the website have been sent"
                },
                "account_id": {
                    "type": "integer",
                    "description": "The ID of the associated account"
                },
                "asset_field_id": {
                    "type": "integer",
                    "description": "The ID of the related asset field (optional)"
                },
                "company_id": {
                    "type": "integer",
                    "description": "The ID of the associated company"
                },
                "discarded_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the website was discarded (optional)"
                },
                "disable_ssl": {
                    "type": "boolean",
                    "description": "Indicates whether SSL checks are disabled for the website"
                },
                "disable_whois": {
                    "type": "boolean",
                    "description": "Indicates whether WHOIS checks are disabled for the website"
                },
                "disable_dns": {
                    "type": "boolean",
                    "description": "Indicates whether DNS checks are disabled for the website"
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes related to the website"
                },
                "object_type": {
                    "type": "string",
                    "description": "The type of the object, in this case, 'Website'"
                },
                "icon": {
                    "type": "string",
                    "description": "The FontAwesome icon related to the website"
                },
                "asset_type": {
                    "type": "string",
                    "description": "The type of the asset, in this case, 'Website'"
                },
                "company_name": {
                    "type": "string",
                    "description": "The name of the associated company"
                },
                "url": {
                    "type": "string",
                    "description": "The URL path of the website within the application"
                }
            }
        },
        "Upload": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Unique identifier of the upload"
                },
                "url": {
                    "type": "string",
                    "description": "URL where the file can be accessed"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the file"
                },
                "ext": {
                    "type": "string",
                    "description": "File extension"
                },
                "mime": {
                    "type": "string",
                    "description": "MIME type of the file"
                },
                "size": {
                    "type": "string",
                    "description": "Size of the file"
                },
                "created_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the file was uploaded"
                },
                "archived_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the file was archived. Null if the file is not archived."
                },
                "uploadable_id": {
                    "type": "integer",
                    "description": "ID of the object the file is associated with"
                },
                "uploadable_type": {
                    "type": "string",
                    "description": "Type of the object the file is associated with"
                }
            },
            "required": [
                "id",
                "url",
                "name",
                "ext",
                "mime",
                "size",
                "created_date"
            ]
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The unique identifier of the user."
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user."
                },
                "otp_required_for_login": {
                    "type": "boolean",
                    "description": "Indicates if OTP is required for logging in."
                },
                "security_level": {
                    "type": "string",
                    "description": "Security level assigned to the user."
                },
                "first_name": {
                    "type": "string",
                    "description": "The first name of the user."
                },
                "last_name": {
                    "type": "string",
                    "description": "The last name of the user."
                },
                "phone_number": {
                    "type": "string",
                    "description": "The phone number of the user."
                },
                "slug": {
                    "type": "string",
                    "description": "A slug representing the user."
                },
                "time_zone": {
                    "type": "string",
                    "description": "The time zone of the user."
                },
                "accepted_invite": {
                    "type": "boolean",
                    "description": "Indicates if the user has accepted an invite."
                },
                "sign_in_count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of times the user has signed in."
                },
                "currently_signed_in": {
                    "type": "boolean",
                    "description": "Indicates if the user is currently signed in."
                },
                "last_sign_in_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of the last sign-in."
                },
                "last_sign_in_ip": {
                    "type": "string",
                    "description": "IP address from the last sign-in."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the user was created."
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the last user update."
                },
                "archived": {
                    "type": "boolean",
                    "description": "Indicates if the user is archived (discarded)."
                },
                "portal_member_company_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the associated company, if the user is a portal member. Can Be null."
                },
                "score_30_days": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The user's score over the past 30 days."
                },
                "score_all_time": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The user's all-time score."
                },
                "score_90_days": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The user's score over the past 90 days."
                }
            }
        }
    },
    "schemes": [
        "https",
        "http"
    ],
    "tags": [],
    "securityDefinitions": {
        "APIKeyHeader": {
            "type": "apiKey",
            "in": "header",
            "name": "x-api-key"
        }
    },
    "security": [
        {
            "APIKeyHeader": []
        }
    ],
    "host": "hudu.intellectit.com.au"
}